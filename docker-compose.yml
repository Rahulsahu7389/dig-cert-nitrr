# services:
#   backend:
#     image: piyushthedock/dig-cert-nitrr-backend:latest
#     restart: always
#     # build: ./backend
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#     ports:
#       - "8000:8000"
#     volumes:
#       - ./backend:/backend
#     command: bash -c "python manage.py migrate &&
#                       python manage.py runserver 0.0.0.0:8000"
#     env_file:
#         - .env
#     depends_on:
#       - db

#   frontend:
#     image: piyushthedock/dig-cert-nitrr-frontend:latest
#     restart: always
#     build: 
#       context: ./frontend
#       dockerfile: Dockerfile
#     ports:
#       - "3000:3000"
#     volumes:
#       - "./frontend:/frontend"
#       - "/frontend/node_modules"
#     command: npm start
#     depends_on:
#       - backend
#     environment:
#       - WATCHPACK_POLLING=true

#   db:
#     image: postgres
#     volumes:
#       - ./db:/var/lib/postgresql/data
#     # ports:
#     #   - "5432:5432"
#     env_file:
#       - .env

#   redis:
#     image: redis:latest

#   celery_worker:
#     image: piyushthedock/dig-cert-nitrr-celery_worker
#     restart: always
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#     depends_on:
#       - redis
#       - backend
#     volumes:
#       - "./backend:/backend"
#     env_file:
#       - .env
#     # environment:
#     #   - C_FORCE_ROOT=true
#     #   - CELERY_BROKER=redis://redis:6379/0
#     command: python -m celery -A main.tasks worker --loglevel=DEBUG

#   nginx:
#     image: piyushthedock/dig-cert-nitrr-nginx
#     build: ./nginx
#     ports:
#       - "8080:80"
#   # at the end of your Dockerfile
#   COPY ./static /usr/share/nginx/django_static:


version: '3.8'

services:
  db:
    image: postgres
    volumes:
      - ./db:/var/lib/postgresql/data
    env_file:
      - .env

  redis:
    image: redis:latest

  backend:
    image: piyushthedock/dig-cert-nitrr-backend:latest
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/backend
    command: >
      bash -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    env_file:
      - .env
    depends_on:
      - db
      - redis

  celery_worker:
    image: piyushthedock/dig-cert-nitrr-celery_worker
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - redis
      - backend
    volumes:
      - ./backend:/backend
    env_file:
      - .env
    command: celery -A backend worker --loglevel=DEBUG
    # command: python -m celery -A main.tasks worker --loglevel=DEBUG

  frontend:
    image: piyushthedock/dig-cert-nitrr-frontend:latest
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
    command: npm start
    depends_on:
      - backend
    environment:
      - WATCHPACK_POLLING=true

  nginx:
    image: piyushthedock/dig-cert-nitrr-nginx
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - backend
    volumes:
      # Mount the static files from Django after collectstatic runs
      - ./backend/static:/usr/share/nginx/html/static